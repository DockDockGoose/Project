version: "3.9"
   
services:
  web:
    build:
      context: ./stocksite
      dockerfile: Dockerfile.prod
    image: stocksite-webapp     # Specify name & tag for the image that is built
    # command: gunicorn stocksite.wsgi:application --bind 0.0.0.0:8000
    command: gunicorn stocksite.wsgi:application --bind 0.0.0.0:8000 -k gevent --worker-connections=1000 --workers=5    # workers= num_cpu_cores * 2 + 1
    # command: gunicorn stocksite.wsgi:application --bind 0.0.0.0:8000 -k gthread --worker-connections=100 --workers=4 --threads=10
    volumes:
      - static_volume:/home/app/web/staticfiles
    expose:
      - "8000"
    env_file: 
      - ./.env.prod
    depends_on: 
      - mongo
      - redis
    networks: 
      - localnet

  mongo:
    image: mongo
    restart: always
    command: --quiet
    volumes:
      - ./stocksite/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - data-db:/data/db
    env_file: 
      - ./.env.prod.db
    networks: 
      - localnet
    ports: 
      - "27018:27017"    # Remove for security - (only used for collecting logs from the dockerized database)

  redis:
    restart: always
    image: redis
    container_name: redis
    ports:
      - 6379:6379
    networks: 
      - localnet

  mongo-express:
    image: mongo-express
    restart: always
    container_name: mongo-express
    ports:
      - "8081:8081"
    volumes:
      - data-db:/data/db
    environment:
      ME_CONFIG_MONGODB_SERVER: 'mongo'
      ME_CONFIG_MONGODB_ENABLE_ADMIN: 'true'
      ME_CONFIG_MONGODB_BASICAUTH_USERNAME: 'admin'
      ME_CONFIG_MONGODB_BASICAUTH_PASSWORD: 'duck'
      ME_CONFIG_MONGODB_ADMINUSERNAME: 'root'
      ME_CONFIG_MONGODB_ADMINPASSWORD: 'dockdockgoose'
    depends_on: 
      - mongo
    links:
      - mongo
    networks: 
      - localnet


  nginx:
    build: ./nginx
    image: stocksite-nginx
    volumes:
      - static_volume:/home/app/web/staticfiles
    ports:
      - "80:80"
    depends_on:
      - web
    networks: 
      - localnet
    restart: unless-stopped


  # nginx-vts-exporter:
  #   container_name: nginx-vts-exporter
  #   image: sophos/nginx-vts-exporter
  #   networks:
  #     - localnet
  #   ports:
  #     - "9913:9913"
  #   environment:
  #     - NGINX_STATUS=http://nginx/status/format/json
  #     - NGINX_HOST=nginx:80


  # prometheus:
  #   container_name: prometheus
  #   image: prom/prometheus:v2.14.0
  #   volumes:
  #     - ./prometheus/:/etc/prometheus/
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   ports:
  #     - "9090:9090"
  #   networks: 
  #     - localnet
  
  # grafana:
  #   container_name: grafana
  #   image: grafana/grafana:6.5.2
  #   ports:
  #     - "3060:3000"
  #   volumes:
  #     - ./graf_data:/var/lib/grafana
  #   environment:
  #      # Disable authentication
  #     - GF_AUTH_DISABLE_LOGIN_FORM=true
  #     - GF_AUTH_ANONYMOUS_ENABLED=true
  #     - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
  #     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #     - GF_DASHBOARDS_JSON_ENABLED=true

volumes:
  data-db:
  static_volume:

networks:
  localnet:
    driver: 'bridge'