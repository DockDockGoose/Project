version: "3.9"
   
services:
  web:
    image: dckdockgoose/stocksite-webapp:1.5    # Build this image
    # command: ["gunicorn", "--bind", "0.0.0.0:8000", "stocksite.wsgi:application", "-k", "gevent", "--workers=5"]
    command: gunicorn stocksite.wsgi:application --bind 0.0.0.0:8000 -k gevent --worker-connections=1000 --workers=5    # workers= num_cpu_cores * 2 + 1
    volumes:
      - static_volume:/home/app/web/staticfiles
    deploy:
      replicas: 10
      restart_policy:
        condition: on-failure
      # placement:
      #   constraints: [node.role == worker]
    expose:
      - "8000"
    env_file: 
      - ./.env.prod
    depends_on: 
      - mongo
    networks: 
      - swarmnet

  mongo:
    image: dckdockgoose/stocksite-mongo:1.2
    # command: [--auth]
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager] 
    volumes:
      - ./stocksite/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - data-db:/data/db
    env_file: 
      - ./.env.prod.db
    networks: 
      - swarmnet


  mongo-express:
    image: mongo-express
    restart: always
    container_name: mongo-express
    ports:
      - "8081:8081"
    volumes:
      - data-db:/data/db
    environment:
      ME_CONFIG_MONGODB_SERVER: 'mongo'
      ME_CONFIG_MONGODB_ENABLE_ADMIN: 'true'
      ME_CONFIG_MONGODB_BASICAUTH_USERNAME: 'admin'
      ME_CONFIG_MONGODB_BASICAUTH_PASSWORD: 'duck'
      ME_CONFIG_MONGODB_ADMINUSERNAME: 'root'
      ME_CONFIG_MONGODB_ADMINPASSWORD: 'dockdockgoose'
    depends_on: 
      - mongo
    links:
      - mongo
    networks: 
      - localnet


  nginx:
    image: dckdockgoose/stocksite-nginx:1.3
    volumes:
      - static_volume:/home/app/web/staticfiles
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      # placement:
      #   constraints: [node.role == worker] 
    ports:
      - "80:80"
    depends_on:
      - web
    networks: 
      - swarmnet


  visualizer:
    image: dockersamples/visualizer:latest
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - swarmnet

    
volumes:
  data-db:
  static_volume:

networks:
  swarmnet:
    driver: 'overlay'